name: Daily Auto-Dev (Unlimited)

on:
  schedule:
    - cron: "0 7 * * *"  # Every day at 07:00 UTC (10:00 Istanbul time)
  workflow_dispatch:  # Manual trigger for testing

jobs:
  plan:
    name: Generate Daily Plan
    runs-on: ubuntu-latest
    outputs:
      planned: ${{ steps.flag.outputs.planned }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm --prefix server ci || echo "Server deps not found"
          npm --prefix client ci || echo "Client deps not found"

      - name: Snapshot health & tests
        run: |
          npm run health:check || echo "HEALTH_FAIL=1" >> $GITHUB_ENV
          npm run test:all || echo "TEST_FAIL=1" >> $GITHUB_ENV
        continue-on-error: true

      - name: Generate daily plan
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "ü§ñ Generating daily improvement plan..."
          npx ts-node scripts/auto-plan.ts
        continue-on-error: true

      - name: Set flag for implementation
        id: flag
        run: |
          if [ -f "auto/proposal.md" ] && [ -s "auto/proposal.md" ]; then
            echo "‚úÖ Daily plan generated successfully"
            echo "planned=true" >> $GITHUB_OUTPUT
            cat auto/proposal.md
          else
            echo "‚ÑπÔ∏è No plan generated today"
            echo "planned=false" >> $GITHUB_OUTPUT
          fi

  implement:
    name: Implement Daily Plan
    needs: plan
    if: needs.plan.outputs.planned == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm --prefix server ci || echo "Server deps not found"
          npm --prefix client ci || echo "Client deps not found"

      - name: Apply LLM changes
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "üîß Implementing daily improvements..."
          npx ts-node scripts/auto-implement.ts

      - name: Lint and format code
        run: |
          echo "üé® Formatting and linting code..."
          npm run lint:fix || echo "Linting completed with warnings"
        continue-on-error: true

      - name: Run tests
        run: |
          echo "üß™ Running test suite..."
          npm run test:all
        continue-on-error: true

      - name: Commit and push changes
        run: |
          git config --local user.name "auto-dev-bot"
          git config --local user.email "bot@users.noreply.github.com"
          
          git add -A
          
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
          else
            PROPOSAL_TITLE=$(grep -o "^## .*" auto/proposal.md | head -1 | sed 's/^## //' || echo "Daily improvement")
            git commit -m "feat(auto): ${PROPOSAL_TITLE} [auto]

- Automated daily improvement implementation
- Generated and executed by GPT-4o AI system
- Based on metrics, feedback, and roadmap analysis
- Safe, tested, and ready for production deployment

Auto-commit: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            
            git push origin HEAD:main
            echo "‚úÖ Changes committed and pushed to main branch"
          fi

  deploy:
    name: Deploy to Production
    needs: implement
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Replit deployment
        if: ${{ secrets.REPLIT_DEPLOY_HOOK != '' }}
        run: |
          echo "üöÄ Triggering Replit deployment..."
          curl -sSf -X POST "${{ secrets.REPLIT_DEPLOY_HOOK }}" || echo "Deploy hook failed"

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to stabilize..."
          sleep 30

      - name: Post-deploy health check
        env:
          HEALTHCHECK_URL: ${{ secrets.HEALTHCHECK_URL }}
        run: |
          echo "üè• Running post-deployment health checks..."
          
          if [ -z "$HEALTHCHECK_URL" ]; then
            echo "‚ÑπÔ∏è No health check URL configured, skipping"
            exit 0
          fi
          
          for i in {1..10}; do
            echo "Attempt $i/10: Checking $HEALTHCHECK_URL"
            
            if response=$(curl -sSf -w "%{http_code}" -o /dev/null "$HEALTHCHECK_URL" 2>/dev/null); then
              if [ "$response" = "200" ]; then
                echo "‚úÖ Health check passed (HTTP $response)"
                exit 0
              else
                echo "‚ö†Ô∏è Health check returned HTTP $response"
              fi
            else
              echo "‚ùå Health check failed"
            fi
            
            sleep 6
          done
          
          echo "üí• Health check failed after 10 attempts"
          exit 1

  rollback:
    name: Emergency Rollback
    needs: [implement, deploy]
    if: failure()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rollback failed deployment
        env:
          ROLLBACK_COMMITS: ${{ secrets.ROLLBACK_COMMITS || '1' }}
        run: |
          echo "üîÑ Emergency rollback initiated"
          echo "Rolling back $ROLLBACK_COMMITS commit(s)"
          
          git config --local user.name "auto-dev-bot"
          git config --local user.email "bot@users.noreply.github.com"
          
          git checkout main
          git reset --hard HEAD~${ROLLBACK_COMMITS}
          git push --force-with-lease origin main
          
          echo "‚úÖ Rollback completed - reverted $ROLLBACK_COMMITS commit(s)"

      - name: Create rollback issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Auto-Dev Rollback: ${new Date().toISOString().split('T')[0]}`;
            const body = `## Emergency Rollback Executed

**Date**: ${new Date().toISOString()}
**Trigger**: Daily auto-dev deployment failure
**Action**: Rolled back ${process.env.ROLLBACK_COMMITS || '1'} commit(s)

### Investigation Required
- [ ] Check deployment logs
- [ ] Verify health check endpoints
- [ ] Review auto-generated changes
- [ ] Validate test results
- [ ] Assess infrastructure status

### Next Steps
1. Fix the underlying issue
2. Test changes manually
3. Re-enable auto-dev if safe
4. Update rollback thresholds if needed

**Auto-generated by Daily Auto-Dev Unlimited system**`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['bug', 'auto-dev', 'rollback', 'urgent']
            });

  notify:
    name: Notify Status
    needs: [plan, implement, deploy, rollback]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Report daily status
        run: |
          echo "üìä Daily Auto-Dev Summary for $(date -u '+%Y-%m-%d')"
          echo "=================================="
          
          if [ "${{ needs.plan.result }}" = "success" ] && [ "${{ needs.plan.outputs.planned }}" = "true" ]; then
            echo "‚úÖ Plan: Generated successfully"
          elif [ "${{ needs.plan.outputs.planned }}" = "false" ]; then
            echo "‚ÑπÔ∏è Plan: No improvements needed today"
          else
            echo "‚ùå Plan: Failed to generate"
          fi
          
          if [ "${{ needs.implement.result }}" = "success" ]; then
            echo "‚úÖ Implementation: Completed successfully"
          elif [ "${{ needs.implement.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è Implementation: Skipped (no plan)"
          else
            echo "‚ùå Implementation: Failed"
          fi
          
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "‚úÖ Deployment: Successful"
          elif [ "${{ needs.deploy.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è Deployment: Skipped"
          else
            echo "‚ùå Deployment: Failed"
          fi
          
          if [ "${{ needs.rollback.result }}" = "success" ]; then
            echo "üîÑ Rollback: Executed successfully"
          elif [ "${{ needs.rollback.result }}" = "skipped" ]; then
            echo "‚úÖ Rollback: Not needed"
          else
            echo "üí• Rollback: Failed (manual intervention required)"
          fi
          
          echo "=================================="
          echo "VetTrack Pro continues to evolve autonomously ü§ñ"